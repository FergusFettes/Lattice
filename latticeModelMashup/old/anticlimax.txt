=== Executing: ===
%timeit roll_columns(1, dim_v, arr_v)
%timeit roll_columns(-1, dim_v, arr_v)
%timeit roll_rows(-1, dim_v, arr_v)
%timeit roll_rows(1, dim_v, arr_v)
%timeit np.roll(arr, 1, axis=1)
%timeit np.roll(arr, -1, axis=1)
%timeit np.roll(arr, 1, axis=0)
%timeit np.roll(arr, -1, axis=0)
%timeit roll_columns_nu(1, dim_v, arr_v)
%timeit roll_columns_nu(-1, dim_v, arr_v)
%timeit roll_rows_nu(1, dim_v, arr_v)
%timeit roll_rows_nu(-1, dim_v, arr_v)
=== Output: ===
1.19 ms ± 3.69 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
1.4 ms ± 1.03 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
18.3 ms ± 56.8 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
19.2 ms ± 73.6 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
877 µs ± 1.61 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
885 µs ± 1.2 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
563 µs ± 2.11 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
546 µs ± 696 ns per loop (mean ± std. dev. of 7 runs, 1000 loops each)
829 µs ± 1.26 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
832 µs ± 2.23 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
495 µs ± 2.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
524 µs ± 831 ns per loop (mean ± std. dev. of 7 runs, 1000 loops each)
